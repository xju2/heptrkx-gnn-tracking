#!/usr/bin/env python 
"""
Merge predoublets for training.
"""

selected_features =  [
    'evtid', 'solution',
    'hit_id_in', 'hit_id_out',
    'dphi', 'dz', 'dr', 'phi_slope', 'z0', 'deta', 'deta1', 'dphi1',
    # 'x_in', 'y_in', 'z_in',
    # 'x_out', 'y_out' 'z_out',
    # 'hit_idx_in', 'hit_idx_out',
    # 'layer_in', 'layer_out',
]

if __name__ == "__main__":
    import argparse
    import time
    import os

    from heptrkx.utils import is_df_there
    import numpy as np
    import pandas as pd
    from sklearn.utils import shuffle

    parser = argparse.ArgumentParser(description="merge true and fake pairs")
    add_arg = parser.add_argument
    add_arg('file_names', nargs='+', help='file names')
    add_arg('--outdir', help='output directory', default='.')
    add_arg('--layer', type=int, help='layer id', default=None)
    add_arg('-v', '--verbose', action='store_true', help='print debug info')
    args = parser.parse_args()

    file_names = args.file_names
    outdir = args.outdir
    verbose = args.verbose
    if not os.path.exists(outdir):
        os.makedirs(outdir)

    file_name = file_names[0]
    with pd.HDFStore(file_name) as store:
        pair_list = np.unique([int(x.split('/')[2][4:]) for x in store.keys()]).tolist()

    print("In total {} pairs".format(len(pair_list)))
    if args.layer:
        pair_list = [args.layer]

    for pair in pair_list:
        if verbose:
            print("Processing Pair {}".format(pair))
        df_list = []
        outname = os.path.join(outdir, 'pairs4TrainingNN_pair{:03}'.format(pair))
        # if is_df_there(outname):
        #     print(outname, "is there, continue")
        #     continue

        n_evts_per_file = 10
        ifile = 0
        for file_name in file_names:

            with pd.HDFStore(file_name, mode='r') as store:
                for key in store.keys():
                    if 'pair{}'.format(pair) in key:
                        if verbose:
                            print("Adding {}".format(key))
                        data = store[key][selected_features]
                        df_list.append(data)
            # print(len(df_list))
            # if len(df_list) == n_evts_per_file:
        # print("reached", n_evts_per_file, "events, save them")
        df_all = pd.concat(df_list, ignore_index=True)
        df_all = shuffle(df_all, random_state=10)
        n_true = df_all[df_all.solution].shape[0]
        n_fake = df_all[~df_all.solution].shape[0]
        print("Pair {} has {} true and {} fake".format(pair, n_true, n_fake))
        tmp_outname = outname + "_{}.h5".format(ifile)
        ifile += 1

        with pd.HDFStore(tmp_outname, mode='w') as store:
            store['data'] = df_all
        # df_all = []

        # if len(df_all) > 0:
        #     print("Save the rest events")
        #     df_all = pd.concat(df_list, ignore_index=True)
        #     df_all = shuffle(df_all, random_state=10)
        #     n_true = df_all[df_all.solution].shape[0]
        #     n_fake = df_all[~df_all.solution].shape[0]
        #     print("Pair {} has {} true and {} fake".format(pair, n_true, n_fake))
        #     tmp_outname = outname + "_{}.h5".format(ifile)
        #     ifile += 1
        #     with pd.HDFStore(tmp_outname, mode='w') as store:
        #         store['data'] = df_all
