#!/usr/bin/env python
"""
Calculate doublet efficiency for cut-based selections
"""

from heptrkx import master

from heptrkx.doublet import create_segments
from heptrkx.doublet import calculate_segment_features

import pandas as pd
import numpy as np

layers = [7, 8, 9, 10, 24, 25, 26, 27, 40, 41]
layer_pairs = [
    (7, 8), (8, 9), (9, 10), (10, 24), (24, 25), (25, 26), (26, 27), (27, 40), (40, 41)
]

def get_eff(event, phi_slope_cut=0.005, z0_cut=500):
    hits = event.hits
    hits = hits[ (hits.layer.isin(layers)) & (hits.particle_id > 0) ]
    true_segments = list(create_segments(hits, layer_pairs, only_true=True))
    true_segments = pd.concat(true_segments, ignore_index=True)

    features = calculate_segment_features(true_segments)
    
    a1 = true_segments[(features["phi_slope"].abs() < phi_slope_cut) \
        & (features["z0"].abs() < z0_cut)]

    return a1.shape[0]/true_segments.shape[0]

if __name__ == "__main__":

    import os
    import argparse
    import concurrent.futures
    import matplotlib.pyplot as plt

    parser = argparse.ArgumentParser(description="Efficiency of different doublet cuts")
    add_arg = parser.add_argument
    add_arg('nevts', type=int, help='number of events')
    add_arg('outname', help='output name')
    add_arg('--input-dir', default='/global/cfs/projectdirs/m3443/usr/xju/heptrkx/codalab/inputs/train_all',
            help='input trackML data')
    add_arg('--phislope-cut', type=float, default=0.004)
    add_arg('--z0-cut', type=float, default=500.)
    add_arg('-w', '--workers', type=int, default=1)
    add_arg('--start-evt-id', default=21001)
    args = parser.parse_args()

    input_dir = args.input_dir
    phi_slope_cut = args.phislope_cut
    z0_cut = args.z0_cut
    n_events = args.nevts
    n_workers = args.workers
    evt_start = args.start_evt_id
    out_name = args.outname

    event = master.Event(input_dir)
    with concurrent.futures.ProcessPoolExecutor(max_workers=n_workers) as executor:
        futures = []
        for ievt in range(n_events):
            evtid = evt_start + ievt
            if event.read(evtid):
                futures.append(executor.submit(get_eff, event, phi_slope_cut, z0_cut))
        
        efficiencies = [future.result() for future in futures]
        plt.hist(efficiencies, histtype='step', lw=2)
        plt.xlabel('Efficiency')
        plt.savefig(out_name)

    

