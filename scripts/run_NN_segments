#!/usr/bin/env python

if __name__ == "__main__":
    import os
    import argparse
    import subprocess
    from heptrkx import load_yaml, layer_pairs, select_pair_layers

    parser = argparse.ArgumentParser(description='run MT')
    add_arg = parser.add_argument
    add_arg('config', help='configuration file')
    add_arg('evtid', help='evalution on which event')

    args = parser.parse_args()
    config_dir = args.config
    evtid = args.evtid

    config = load_yaml(config_dir)
    ## merge segments
    base_dir = config['doublets_for_training']['base_dir']
    bkg_evtid = config['doublet_training']['bkg_from_evtid']

    true_pairs_dir = os.path.join(base_dir, config['doublets_for_training']['true_pairs'], 'training')
    fake_pairs_dir = os.path.join(base_dir,
                                  config['doublets_for_training']['all_pairs'],
                                  'evt{}'.format(bkg_evtid))
    model_out_dir = config['doublet_training']['model_output_dir']
    layers = config['layers']

    def find_threshold(pair_idx):
        l_s, l_e = layer_pairs[pair_idx]
        info_name = os.path.join(model_out_dir, "info{:03d}-{}-{}.txt".format(pair_idx, l_s, l_e))
        with open(info_name) as f:
            for line in f:
                threshold = line.split()[3]
                break
        return threshold

    def run_pairs(pair_idx):
        pair_name = "pair{:03d}.h5".format(pair_idx)
        true_file = os.path.join(true_pairs_dir, pair_name)
        fake_file = os.path.join(fake_pairs_dir, pair_name)

        ## merge truth and fake files for training
        merged_file_name = os.path.join(base_dir, 'pairs4TrainingNN_{}'.format(pair_name))
        cmd = ['merge_true_fake_pairs', true_file, fake_file,
               '--outname', merged_file_name]
        print(cmd)
        subprocess.run(cmd)

        ## train the model
        cmd2 = ['tf_train_pairs', config_dir, str(pair_idx), '--input', merged_file_name]
        print(cmd2)
        subprocess.run(cmd2)

        ## find the threshold and evaluate a new event
        threshold = find_threshold(pair_idx)
        cmd3 = ['select_pairs', config_dir, str(pair_idx), threshold, evtid]
        print(cmd3)
        subprocess.run(cmd3)

        ## get efficiency and purity for the evaluated event
        cmd4 = ['evaluate_doublet_NN', config_dir, str(evtid), str(pair_idx)]
        print(cmd4)
        subprocess.run(cmd4)

    sel_layers_idx = select_pair_layers(layers)
    for pair_idx in sel_layers_idx:
        if pair_idx < 4:
            continue
        run_pairs(pair_idx)
