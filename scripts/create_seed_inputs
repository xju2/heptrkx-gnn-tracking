#!/usr/bin/env python
from heptrkx.dataset import event as master
import argparse

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='produce hits info for ACTS seeding')
    add_arg = parser.add_argument
    add_arg('nevts', type=int, help='number of events to be processed')
    add_arg('--no-noise', action='store_true', help="Exclude noise hits")
    add_arg('--layers', nargs='?', help='use hits in the specific layers', default=None,
            const='7,8,9')
    add_arg('-d', '--data',  help="original tracking ML data",
        default='/global/project/projectdirs/m3443/usr/xju/heptrkx/codalab/inputs/train_all')
    add_arg('--start-evt-id', default=21001, type=int)
    add_arg('--eta-cut', default=5.0, type=float, help='eta threshold')
    args = parser.parse_args()

    no_noise = args.no_noise
    layers = args.layers
    if args.layers is not None:
        print("select hits in following layers")
        print(layers)
        layers = [int(x) for x in args.layers.split(',')]

    data_dir = args.data
    n_events = args.nevts
    event = master.Event(data_dir)
    for idx in range(n_events):
        evtid = args.start_evt_id + idx
        if not event.read(evtid):
            print("Event {} not there".format(evtid))
            continue
        event.select_hits(no_noise, args.eta_cut)
        if layers is not None:
            event.filter_hits(layers)

        hits = event.hits
        output_hits = hits[['hit_id', 'layer', 'x', 'y', 'z']].assign(
            lxyz='lxyz', covr=0.01, covz=0.05)
        out_name = 'hits4seeding_{}.csv'.format(evtid)
        output_hits[['lxyz', 'hit_id', 'layer', 'x', 'y', 'z', 'covr', 'covz']].to_csv(out_name, header=False, index=False, sep=" ")
