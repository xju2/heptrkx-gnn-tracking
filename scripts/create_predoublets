#!/usr/bin/env python
"""
THis reads a hit file and create pre-doublets.
Pre-doublets are the doublets that pass very loose selections,
later used for either making graphs or training doublet classifier.
Pre-doublets are divided into different detector regions.

These selection typically yields 94-96% doublet efficiency.
"""

import argparse
import os
import numpy as np
import pandas as pd

from heptrkx.doublet import create_segments, calculate_segment_features
from heptrkx.utils import select_pair_layers, layer_pairs
from heptrkx.utils import list_from_str


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="read hit files and produce pre-doublets")
    add_arg = parser.add_argument
    add_arg('hit_file_name', help='input hit files')
    add_arg('outname', help='output name')
    add_arg('--evtid', default=None, help='process that event')
    add_arg('--input-dir',
            default='/global/cfs/projectdirs/m3443/usr/xju/heptrkx/codalab/inputs/train_all',
            help='input trackML data')
    add_arg('--phislope-cut', type=float, default=0.004)
    add_arg('--z0-cut', type=float, default=500.)
    add_arg('--layers', default="7, 8, 9, 10, 24, 25, 26, 27, 40, 41", help='layers of interest')
    args = parser.parse_args()

    hit_file_name = args.hit_file_name
    outname = args.outname
    evtid = args.evtid
    input_dir = args.input_dir
    phi_slope_cut = args.phislope_cut
    z0_cut = args.z0_cut
    layers = [int(x) for x in args.layers.split(',')]

    if os.path.exists(outname):
        print("{} is there".format(outname))
        exit()
    
    store = pd.HDFStore(outname)

    layers_idx = select_pair_layers(layers)
    selected_layer_pairs = [layer_pairs[x] for x in layers_idx]

    hit_file = pd.HDFStore(hit_file_name)

    if evtid:
        evtids = ["/evt{}".format(x) for x in list_from_str(evtid)]
    else:
        evtids = list(hit_file.keys())

    for evtid in evtids:
        print("Processing {}".format(evtid))
        hits = hit_file[evtid]

        ipair = 0
        for segment in create_segments(hits, selected_layer_pairs):
            features = calculate_segment_features(segment)
            segment = segment.assign(**features)
            mask = (features['phi_slope'].abs() < 0.004) & (features['z0'].abs() < 500)
            passed_segments = segment[mask]

            solution = segment.solution
            true_doublets = passed_segments[passed_segments.solution].shape[0]
            total_true_doublets = solution[solution].shape[0]
            efficiency = true_doublets*100/total_true_doublets
            purity = true_doublets*100/passed_segments.shape[0]
            print("{:,}, efficiency: {:.2f}, purity: {:.2f}".format(passed_segments.shape[0], efficiency, purity))

            store[ "{}/pair{}".format(evtid, layers_idx[ipair])] = passed_segments
            ipair += 1
    
    store.close()

