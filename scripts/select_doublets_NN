#!/usr/bin/env python 
"""
Select doublets for making graph from the pre-doublet candidates
"""
import os
import argparse
import numpy as np
import pandas as pd

from sklearn.preprocessing import StandardScaler
import tensorflow as tf


from heptrkx.utils import load_yaml
from heptrkx.nx_graph import shadow_model
from heptrkx.utils import layer_pairs

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='select doublets using trained neural networks')
    add_arg = parser.add_argument
    add_arg('input_file', help='input pre-doublets')
    add_arg('config_file', help='configuration file')
    add_arg('outname', help='output doublets')
    args = parser.parse_args()

    input_file = args.input_file
    config_file = args.config_file
    outname = args.outname

    config = load_yaml(config_file)
    # NN configurations
    train_cfg = config['doublet_training']
    features = train_cfg['features']
    model_weight_base_dir = os.path.expandvars(train_cfg['model_output_dir'])
    model_name = train_cfg['model']

    # NN thresholds
    cuts = config['segments_from_NN']['cuts']

    scaler = StandardScaler()

    # read pre-doublets
    with pd.HDFStore(input_file, mode='r') as doublets:
        all_keys = list(doublets.keys())
        evtid_list = np.unique([int(x.split('/')[1][3:]) for x in all_keys]).tolist()
        pair_list = np.unique([int(x.split('/')[2][4:]) for x in all_keys]).tolist()

        # [TODO] Loop over all events for the same pair
        for key in all_keys:
            evtid = int(key.split('/')[1][3:])
            pairid = int(key.split('/')[2][4:])
            doublet = doublets[key]
            cut = cuts[pairid]
            all_inputs = scaler.fit_transform(doublet[features].values)

            model_weight_dir = os.path.join(model_weight_base_dir, 'modelpair{:03}.ckpt'.format(pairid))

            with tf.compat.v1.Session(graph=tf.Graph()) as sess:
                model = getattr(shadow_model, model_name)()
                model.load_weights(model_weight_dir)
                prediction = model.predict(all_inputs)
                layer_pair = layer_pairs[pairid]

                passed_segments = doublet[prediction > cut]

                solution = doublet.solution
                true_doublets = passed_segments[passed_segments.solution].shape[0]
                total_true_doublets = solution[solution].shape[0]
                efficiency = true_doublets*100/total_true_doublets
                purity = true_doublets*100/passed_segments.shape[0]
                print("event {}, layer {:2}-{:2}, NN > {:.2f}, {:10,}, efficiency: {:.2f}, purity: {:.2f}".format(
                    evtid,
                    layer_pair[0],
                    layer_pair[1],
                    cut,
                    passed_segments.shape[0], efficiency, purity))