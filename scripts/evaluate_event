#!/usr/bin/env python
"""
Study one event, to find the segment purity, number of reconstrutable tracks
"""

import numpy as np
import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt

from heptrkx import master
from heptrkx import load_yaml, layer_pairs, select_pair_layers
from trackml.score import score_event
from heptrkx.nx_graph import utils_data


if __name__ == "__main__":
    import argparse
    import sys

    parser = argparse.ArgumentParser(description='event studies')
    add_arg = parser.add_argument
    add_arg('config', help="configuration file")
    add_arg('evtid', type=int, help="event id")
    add_arg('--min-hits', type=int, default=5, help="minimum number of hits")
    add_arg('--matching_pct', type=float, default=0.8,
            help="percentage of hits from the true track being found in the reconstructed track candidate")
    add_arg('--no-split', action='store_true', help="do not split into different sections")
    args = parser.parse_args()

    config_file = args.config
    evtid = args.evtid
    min_hits = args.min_hits
    matching_cut = args.matching_pct
    do_split = not args.no_split

    # read configuration, extract used parameters
    config = load_yaml(config_file)
    data_dir = config['track_ml']['dir']
    layers = config['layers']
    print("Study Event {}".format(evtid))
    print("Use hits recorded in Layers:", layers)
    print("Require Minimum of {} hits in a track".format(min_hits))

    try:
        black_list_dir = config['track_ml']['blacklist_dir']
    except KeyError:
        black_list_dir = None

    # read in the event
    event = master.Event(data_dir, black_list_dir)
    event.read(evtid)

    particles = event.particles
    hits = event.hits

    # total particles
    n_tot_particles = particles.shape[0]
    n_tot_hits = hits.shape[0]

    # reconstructable particles
    reconstructable_particles = event.reconstructable_pids(min_hits=0)
    n_reco_trks = len(reconstructable_particles)

    # reconstructable particles with minimum hits
    reco_pp = event.reconstructable_pids(min_hits=min_hits)
    n_reco_good_trks = len(reco_pp)
    hits = hits[hits.particle_id.isin(reco_pp)]
    n_reco_good_hits = hits.shape[0]

    # barrel hits
    hits = hits[hits.layer.isin(layers)]
    n_hits_barrel = hits.shape[0]
    n_trks_barrel = np.unique(hits.particle_id).shape[0]

    # eta > 0
    hits = hits[hits.eta > 0]
    n_hits_pos_eta = hits.shape[0]
    n_trks_pos_eta = np.unique(hits.particle_id).shape[0]

    # remove shared
    hits = hits.loc[hits.groupby(['particle_id', 'layer'], as_index=False).r.idxmin()]
    n_hits_no_dup = hits.shape[0]
    n_trks_no_dup = np.unique(hits.particle_id).shape[0]

    def create_true_segments(hits, layer_pairs):
        gid_keys = 'layer'
        hit_gid_groups = hits.groupby(gid_keys)
        
        segments = []
        for gid1, gid2 in layer_pairs:
            hits1 = hit_gid_groups.get_group(gid1)
            hits2 = hit_gid_groups.get_group(gid2)
            hit_pairs = pd.merge(
                hits1.reset_index(), hits2.reset_index(),
                how='inner', on='particle_id', suffixes=('_in', '_out'))
            true_doublets = hit_pairs[['hit_id_in', 'hit_id_out']].assign(solution=1)
            print("{}-{} has {:,} doublets".format(gid1, gid2, true_doublets.shape[0]))
            segments.append(true_doublets)
        
        merged_segments = pd.concat(segments, ignore_index=True)
        return merged_segments
    
    selected_layer_pairs = [layer_pairs[i] for i in select_pair_layers(layers)]
    all_segments = create_true_segments(hits, selected_layer_pairs)
    G = utils_data.segments_to_nx(hits, 
                                all_segments, 
                                'hit_id_in', 'hit_id_out', 
                                solution_name='solution', 
                                use_digraph=False, bidirection=False)
    can_trkx = nx.k_components(G)[1]
    results = []
    for itrk, tracks in enumerate(can_trkx):
        results += [(G.nodes[track]['hit_id'], itrk) for track in tracks]

    df = pd.DataFrame(results, columns=['hit_id', 'track_id'])
    score = score_event(hits, df)
    print("start:                     {}, {}".format(n_tot_hits, n_tot_particles))
    print("reconstructable particles: {}, {}".format(n_tot_hits, n_reco_trks))
    print("min hits > {}:             {}, {}".format(min_hits, n_reco_good_hits, n_reco_good_trks))
    print("barrel:                    {}, {}".format(n_hits_barrel, n_trks_barrel))
    print("positive eta:              {}, {}".format(n_hits_pos_eta, n_trks_pos_eta))
    print("no duplication:            {}, {}".format(n_hits_no_dup, n_trks_no_dup))
    print("Score:                     {:.4f}".format(score))
    print("total segments:            {}".format(all_segments.shape[0]))