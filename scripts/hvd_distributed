
#!/usr/bin/env python
"""
Training GNN in HPC using Horovod
"""

import tensorflow as tf
from tensorflow.compat.v1 import logging
logging.info("TF Version:{}".format(tf.__version__))
import horovod.tensorflow as hvd
hvd.init()

# tf.debugging.set_log_device_placement(True)

import os
import sys
import argparse
import glob
import re
import time
import random
import functools

import numpy as np
import sklearn.metrics


from graph_nets import utils_tf
from graph_nets import utils_np
import sonnet as snt

from heptrkx.dataset import graph
# from heptrkx.nx_graph.distribute_model import SegmentClassifier
# from heptrkx.nx_graph.model import SegmentClassifier
from heptrkx.nx_graph import get_model
from heptrkx.utils import load_yaml

prog_name = os.path.basename(sys.argv[0])

def train_and_evaluate(args):
    for key,value in vars(args).items():
        print("{} --> {}".format(key, value))

    device = 'CPU'
    global_batch_size = args.train_batch_size 
    gpus = tf.config.experimental.list_physical_devices("GPU")
    for gpu in gpus:
        tf.config.experimental.set_memory_growth(gpu, True)
    if gpus:
        tf.config.experimental.set_visible_devices(gpus[hvd.local_rank()], 'GPU')

    output_dir = args.job_dir
    os.makedirs(output_dir, exist_ok=True)
    logging.info("Checkpoints and models saved at {}".format(output_dir))

    num_processing_steps_tr = args.num_iters     ## level of message-passing
    n_epochs = args.num_epochs
    logging.info("{} epochs with batch size {}".format(n_epochs, global_batch_size))
    logging.info("{} processing steps in the model".format(num_processing_steps_tr))
    # prepare graphs
    logging.info("{} Eta bins and {} Phi bins".format(args.num_eta_bins, args.num_phi_bins))
    max_nodes, max_edges = graph.get_max_graph_size(args.num_eta_bins, args.num_phi_bins)

    logging.info("I am in hvd rank: {} of  total {} ranks".format(hvd.rank(), hvd.size()))
    # train_files = tf.io.gfile.glob(args.train_files.format(hvd.rank()))
    # eval_files = tf.io.gfile.glob(args.eval_files.format(hvd.rank()))
    train_files = tf.io.gfile.glob(args.train_files)
    eval_files = tf.io.gfile.glob(args.eval_files)


    # logging.info("Input file names: ", file_names)
    logging.info("{} training files and {} evaluation files".format(len(train_files), len(eval_files)))
    raw_dataset = tf.data.TFRecordDataset(train_files)
    training_dataset = raw_dataset.map(graph.parse_tfrec_function)

    AUTO = tf.data.experimental.AUTOTUNE
    options = tf.data.Options()
    options.experimental_distribute.auto_shard_policy = tf.data.experimental.AutoShardPolicy.DATA
    training_dataset = training_dataset.with_options(options)
    training_dataset = training_dataset.prefetch(AUTO)

    with_batch_dim = False
    inputs, targets = next(training_dataset.take(1).as_numpy_iterator())
    input_signature = (
        graph.specs_from_graphs_tuple(inputs, with_batch_dim),
        graph.specs_from_graphs_tuple(targets, with_batch_dim),
        tf.TensorSpec(shape=(1,), dtype=tf.bool)
    )

    learning_rate = args.learning_rate
    # optimizer = snt.optimizers.Adam(learning_rate)
    optimizer = tf.optimizers.Adam(learning_rate)
    model = get_model(args.model_name)

    checkpoint = tf.train.Checkpoint(optimizer=optimizer, model=model)
    ckpt_manager = tf.train.CheckpointManager(checkpoint, directory=output_dir, max_to_keep=5)
    logging.info("Loading latest checkpoint from: {}".format(output_dir))
    status = checkpoint.restore(ckpt_manager.latest_checkpoint)

    # training loss
    real_weight = args.real_edge_weight
    fake_weight = args.fake_edge_weight

    def create_loss_ops(target_op, output_ops):
        weights = target_op.edges * real_weight + (1 - target_op.edges) * fake_weight
        row_index = tf.range(tf.constant(max_edges))
        n_valid_edges = target_op.n_edge[0]
        
        mask = tf.cast(row_index < n_valid_edges, tf.float32)
        mask = tf.expand_dims(mask, axis=1)
        weights = weights * mask

        # def loss_in_fcn(idx):
        #     return tf.compat.v1.losses.log_loss(target_op.edges, output_ops[idx].edges, weights=weights)

        # loss_ops = tf.map_fn(loss_in_fcn, tf.range(num_processing_steps_tr))
        loss_ops = [
            tf.compat.v1.losses.log_loss(target_op.edges, output_op.edges, weights=weights)
                for output_op in output_ops
        ]

        return tf.stack(loss_ops)

    # @functools.partial(tf.function, input_signature=input_signature)
    @tf.function(experimental_compile=True)
    def train_step(inputs_tr, targets_tr, first_batch):
        print("Tracing update_step")
        print("inputs nodes", inputs_tr.nodes.shape)
        print("inputs edges", inputs_tr.edges.shape)
        print("input n_node", inputs_tr.n_node.shape)
        with tf.GradientTape() as tape:
            # outputs_tr = model(inputs_tr, tf.constant(num_processing_steps_tr, dtype=tf.int32))
            outputs_tr = model(inputs_tr, num_processing_steps_tr)
            loss_ops_tr = create_loss_ops(targets_tr, outputs_tr)
            loss_op_tr = tf.math.reduce_sum(loss_ops_tr) / tf.constant(num_processing_steps_tr, dtype=tf.float32)

        # Horovod: add Horovod Distributed GradientTape.
        tape = hvd.DistributedGradientTape(tape)
        gradients = tape.gradient(loss_op_tr, model.trainable_variables)
        optimizer.apply_gradients(zip(gradients, model.trainable_variables))

        # Horovod: broadcast initial variable states from rank 0 to all other processes.
        # This is necessary to ensure consistent initialization of all workers when
        # training is started with random weights or restored from a checkpoint.
        #
        # Note: broadcast should be done after the first gradient step to ensure optimizer
        # initialization.
        if first_batch:
            hvd.broadcast_variables(model.trainable_variables, root_rank=0)
            hvd.broadcast_variables(optimizer.variables(), root_rank=0)

        return loss_op_tr


    def train_epoch(dataset):
        total_loss = 0.
        num_batches = 0
        for batch, inputs in enumerate(dataset.take(100 // hvd.size())):
            input_tr, target_tr = inputs

            total_loss += train_step(input_tr, target_tr, batch == 0)

            num_batches += 1
        logging.info("total batches: {}".format(num_batches))
        return total_loss/num_batches

    # this_time =  time.strftime('%d %b %Y %H:%M:%S', time.localtime())
    out_str  = "Start training " + time.strftime('%d %b %Y %H:%M:%S', time.localtime())
    out_str += '\n'
    out_str += "Epoch, Time [mins], Loss\n"
    log_name = os.path.join(output_dir, "training_log.txt")
    with open(log_name, 'a') as f:
        f.write(out_str)
    now = time.time()
    # writer = tf.summary.create_file_writer(os.path.join(output_dir, this_time))

    training_dataset = training_dataset.shuffle(global_batch_size*2, reshuffle_each_iteration=True)

    for epoch in range(n_epochs):
        logging.info("start epoch {} on {}".format(epoch, device))

        loss = train_epoch(training_dataset)
        this_epoch = time.time()
        
        logging.info("Training {} epoch, {:.2f} mins, Loss := {:.4f}".format(
            epoch, (this_epoch-now)/60., loss/global_batch_size))
        out_str = "{}, {:.2f}, {:.4f}\n".format(epoch, (this_epoch-now)/60., loss/global_batch_size)
        with open(log_name, 'a') as f:
            f.write(out_str)

        now = this_epoch
        ckpt_manager.save()

    out_log = "End @ " + time.strftime('%d %b %Y %H:%M:%S', time.localtime()) + "\n"
    with open(log_name, 'a') as f:
        f.write(out_log)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Train nx-graph with configurations')
    add_arg = parser.add_argument
    add_arg("--train-files", help='path to training data', required=True)
    add_arg("--eval-files", help='path to evaluation data', required=True)
    add_arg("--job-dir", help='location to write checkpoints and export models', required=True)
    add_arg("--train-batch-size", help='batch size for training', default=2, type=int)
    add_arg("--eval-batch-size", help='batch size for evaluation', default=2, type=int)
    add_arg("--num-iters", help="number of message passing steps", default=8, type=int)
    add_arg("--learning-rate", help='learing rate', default=0.0005, type=float)
    add_arg("--num-epochs", help='number of epochs', default=1, type=int)
    add_arg("--model-name", help='model name', default='vary2')

    add_arg("--num-eta-bins", default=1, help='number of eat bins', type=int)
    add_arg("--num-phi-bins", default=1, help='number of phi bins', type=int)

    add_arg("--real-edge-weight", help='weights for real edges', default=2., type=float)
    add_arg("--fake-edge-weight", help='weights for fake edges', default=1., type=float)

    add_arg('--tpu', help='use tpu', default=None)
    add_arg("--tpu-cores", help='number of cores in TPU', default=8, type=int)
    add_arg('--zone', help='gcloud zone for tpu', default='us-central1-b')
    add_arg("-v", "--verbose", help='verbosity', choices=['DEBUG', 'ERROR', 'FATAL', 'INFO', 'WARN'],\
        default="INFO")
    args, _ = parser.parse_known_args()

    # Set python level verbosity
    logging.set_verbosity(args.verbose)
    # Suppress C++ level warnings.
    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

    train_and_evaluate(args)