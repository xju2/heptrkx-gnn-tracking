#!/usr/bin/env python


import numpy as np
import argparse

import tensorflow as tf
import sonnet as snt
from graph_nets import utils_tf

from heptrkx.dataset.graph import DoubletGraphGenerator
from heptrkx.nx_graph import get_model



if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Peek into Tensor Flow model')
    add_arg = parser.add_argument
    add_arg("--model", default='default', help='model name')
    args = parser.parse_args()

    # prepare the inputs
    doublet_graphs = DoubletGraphGenerator(
        2, 8, ['x', 'y', 'z', 'geta', 'gphi', 'eta', 'phi', 'r', 'r3'], 
        ['deta', 'dphi', 'dr', 'dz', 'phi_slope', 'deta1', 'dphi1', 'z0']
    )
    hit_file_name = '/global/cscratch1/sd/xju/heptrkx/codalab/inputs/hitfiles/evt21001_test.h5'
    doublet_file_name = '/global/cscratch1/sd/xju/heptrkx/codalab/inputs/doublet_files/doublets-evt21001_test.h5'
    doublet_graphs.add_file(hit_file_name, doublet_file_name)
    batch_size = 1

    @tf.function
    def get_data():
        in_graphs, out_graphs = doublet_graphs.create_graph(batch_size, is_training=True)
        in_graphs = utils_tf.set_zero_global_features(in_graphs, 1)
        out_graphs = utils_tf.set_zero_global_features(out_graphs, 1)
        out_graphs = utils_tf.set_zero_node_features(out_graphs, 1)
        return in_graphs, out_graphs


    learning_rate = 0.001
    optimizer = snt.optimizers.Adam(learning_rate)

    model = get_model(args.model)
    example_input_data, example_target_data = get_data()
    outputs_tr = model(example_input_data, 8)
    n_weights = 0
    for var in model.trainable_variables:
        if len(var.shape) == 1:
            n_weights += var.shape[0]
        else:
            n_weights += var.shape[0] * var.shape[1]

    print("Total {:,} trainable variables".format(n_weights))
    print("Num GPUs Available: ", len(tf.config.experimental.list_physical_devices('GPU')))
